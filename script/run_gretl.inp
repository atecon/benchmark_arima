set verbose off
set warnings off
clear

# Set name of data set to load
string DATASET_NAME = "electricity.csv"

open "../data/@DATASET_NAME" --quiet --preserve

# Set list of exogenous
series Y = load
list L = const temp

# Set parameters
matrix RANGE_p = seq(1, 1)
matrix RANGE_q = seq(0, 1)
matrix RANGE_P = seq(0, 1)
matrix RANGE_Q = seq(0, 1)
scalar D = 0
scalar d = 0

scalar QUIET = TRUE

# Sample lengths to evaluate
matrix SAMPLE_LENGTH = {50, 150, 500, 744}

# store timing results
matrix gretl_results = {}

# Source functions + external package
include "../src/helper.inp" --force
catch include string_utils.gfn
if $error
    # get from gretl package server
    pkg install string_utils
    include string_utils.gfn
endif

genr time

loop i = 1..cols(SAMPLE_LENGTH)

    smpl full
    smpl time <= SAMPLE_LENGTH[i] --restrict --replace

    gretl_results |= loop_over_parameters(Y, L, RANGE_p, d, RANGE_q, RANGE_P, D, RANGE_Q, QUIET)

    printf "Info: Finished evaluation for T = %d observations.\n", $nobs
    flush
endloop

write_gretl_results_to_file (gretl_results, SAMPLE_LENGTH, DATASET_NAME, "../output/gretl_results.txt")

# Import python results
open "../data/python_arima_duration.csv" -p -q
matrix python_results = {dataset}
python_results = (python_results .= -999) ? NA : python_results

# Compute speed ratio and write matrix comparing results
matrix comparison = comparison_matrix(gretl_results, python_results)
write_comparison_to_file(comparison, SAMPLE_LENGTH, DATASET_NAME, "../output/comparison_results.txt")
printf "%10.3f\n", comparison


