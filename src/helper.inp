function void write_gretl_results_to_file (const matrix results,
                                        const matrix SAMPLE_LENGTH,
                                        const string name_dataset,
                                        const string filename)
    /* Write results for each sample length (T) to a single file.
    return: void */

    catch outfile "@filename"
        print "Summary of gretl's timing results"
        print "using its built-in command 'arima'."
        printf "\nDataset used: ./data/%s\n\n", name_dataset
        print "Legend:"
        print "k: Number of exogenous variables (incl. intercept)"
        print "T: sample length"
        print "fcount: Number of function evaluations"
        print "gcount: Number of gradient evaluations"
        print "p, d, q, P, D, Q: respective SARIMA parameters"
        print ""
        print ""

        print_results_by_numobs(results, SAMPLE_LENGTH)
    end outfile

    if $error
        printf "\nError: Failed to write '%s'", filename
    endif
end function

function void print_results_by_numobs (const matrix results,
                                       const matrix SAMPLE_LENGTH)
    /* Print results for each sample length separately. */

    loop i = 1..cols(SAMPLE_LENGTH)
        matrix mask = (results[, instrings(cnameget(results), "T")] .= SAMPLE_LENGTH[i])
        printf "%10.3f\n", selifr(results, mask)
    endloop
end function

function void write_comparison_to_file (const matrix comparison,
                                    const matrix SAMPLE_LENGTH,
                                    const string name_dataset,
                                    const string path)
    /* Write results for each sample length (T) to a single file.
    return: void */

    catch outfile "@path"
        print "Summary speed comparison estimating ARIMA-type models."
        print "between Python's 'statsmodels' package and gretl's built-in apparatus."
        printf "\nDataset used: ./data/%s\n\n", name_dataset
        print "Legend:"
        print "k: Number of exogenous variables (incl. intercept)"
        print "ratio: time(Python) / time(gretl)"
        print "T: sample length"
        print "p, d, q, P, D, Q: respective SARIMA parameters"
        print ""
        print ""

        print_results_by_numobs(comparison, SAMPLE_LENGTH)
    end outfile

    if $error
        printf "\nError: Failed to write summary results to '%s'", path
    endif
end function


function bundle estimate_arima (const series y,
                                const list L[null],
                                const int p[0::],
                                const int d[0::],
                                const int q[0::],
                                const int P[0::],
                                const int D[0::],
                                const int Q[0::],
                                scalar *error,
                                const bool quiet[TRUE])
    /* Execute actual ARIMA command
    return: type, estimation time in seconds. */

    bundle B = null

    if quiet == TRUE
        string option = "--quiet"
    else
        string option = ""
    endif

    set stopwatch
    catch arima p d q ; P D Q ; y L @option

    error = $error
    if error
        printf "Error: Failed to estimate ARIMA(%d, %d, %d)(%d, %d, %d).\n", p, d, q, P, D, Q
    else
        B.time = $stopwatch
        B.neval_gradient = $model.grcount
        B.neval_function = $model.fncount
    endif

    return B
end function



function matrix loop_over_parameters (const series y,
                                const list L[null],
                                const matrix RANGE_p,
                                const int d,
                                const matrix RANGE_q,
                                const matrix RANGE_P,
                                const int D,
                                const matrix RANGE_Q,
                                const bool quiet[TRUE])
    /* Loop over parameter values and estimate ARIMA models
    return: matrix, Holding estimation time and parameter values. */

    matrix RESULTS = {}
    scalar error = FALSE

    loop p = 1..cols(RANGE_p)
        loop q = 1..cols(RANGE_q)
            loop P = 1..cols(RANGE_P)
                loop Q = 1..cols(RANGE_Q)

                    bundle B = estimate_arima(y, L, RANGE_p[p], d, RANGE_q[q], RANGE_P[P], D, RANGE_Q[Q], &error, quiet)

                    matrix RESULTS |= nelem(L) ~ RANGE_p[p] ~ d ~ RANGE_q[q] ~ RANGE_P[P] ~ D ~ RANGE_Q[Q] ~ B.time ~ $nobs ~ B.neval_function ~ B.neval_gradient

                    error = 0           # reset
                endloop
            endloop
        endloop
    endloop

    cnameset(RESULTS, "k p d q P D Q time T fcount gcount")

    return RESULTS
end function

function matrix comparison_matrix (const matrix gretl_results,
                                    const matrix python_results)
    /* Compute ratio of timings and merge results.
    return: matrix */

    matrix comparison = gretl_results[,1:7] ~ ((python_results[,8] ./ gretl_results[,8])) ~ python_results[,9]

    # Construct column labels
    strings colnames = cnameget(gretl_results)
    colnames[8] = "ratio"
    # Drop two column labels for which we don't have Python counterparts, yet
    strings colnames = strdrop(colnames, "fcount")
    strings colnames = strdrop(colnames, "gcount")
    cnameset(comparison, colnames)

    return  comparison
end function
